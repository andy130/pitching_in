{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\"%CR*?7+insQfGgvR3`HY\" x=\"10\" y=\"10\"><next><block type=\"iq_drivetrain_set_drive_heading\" id=\"lR2!6-C:aL[`-+t~X@p`\"><value name=\"HEADING\"><shadow type=\"math_number\" id=\"}kf}4A]YBe4NfZYWJrZ^\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"`EWc=6t2Gv:7IQ/gM8[F\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"lHNKRO:N}kZQlh],|%E*\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"iq_drivetrain_set_drive_stopping\" id=\"GUJ|Prgk?;HW,Ox8*0RR\"><field name=\"MODE\">coast</field><next><block type=\"iq_motion_set_motor_torque\" id=\"QeqWCTeNzy_DL@.rEcRb\"><field name=\"MOTOR\">ARM</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"~[##QVypdicdD839l~~D\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_stopping\" id=\"T9j0qgI9MHY!WCt*dj)a\"><field name=\"MOTOR\">ARM</field><field name=\"MODE\">hold</field><next><block type=\"iq_motion_set_motor_torque\" id=\"8$xt,l[iVL117^(S`*$+\"><field name=\"MOTOR\">Harvester</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"D[Hk7SX@CCK-xyO;uAW6\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"mH9/N*,Mevynlot.h#F8\"><field name=\"TOUCHLED\">TouchLED_Red</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"mu-!lD_([~iX?k[aVa./\"><field name=\"COLOR\">red</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"8~D(W:PLD,`ULVy-mLFa\"><field name=\"TOUCHLED\">TouchLED_Purple</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"D4F{+a|X8PI$_4}*Ypi9\"><field name=\"COLOR\">purple</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"-=zc[%l[p@MU~uVTJ]E*\"><field name=\"TOUCHLED\">TouchLED_Blue</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"(~`d(r@S^25xR}|0cnA~\"><field name=\"COLOR\">blue</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"w;TsE{iGaQrbiJFtN;X{\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"E#D^(M?%|ud4~{wk;S)B\"><field name=\"TEXT\">Cyber Doll</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"*;?VzCA7Ah:j6Xcg_j;k\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"t$eK_XLib*F%)G(!|tl}\"><field name=\"TEXT\">Battery=</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"m8[r](Rk*lwzf8Bm~A]_\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"ad#4y(4_GG|[O3eg$|gi\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_sensing_battery_level\" id=\"r+^0l8~`2fEEp@;_C7t{\"></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"Wz*dn~tdgAs)xqx:Q(x,\" x=\"30\" y=\"670\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"0F8K-#*~7|D.#T?TcX/}\"><field name=\"MOTOR\">Harvester</field><field name=\"DIRECTION\">fwd</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"!@yF^2uaJrAT#=n#qCJL\" x=\"490\" y=\"670\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_spin\" id=\"*B3Z8H9I%zKy=Sh#IT(U\"><field name=\"MOTOR\">Harvester</field><field name=\"DIRECTION\">fwd</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"j9s/4M!^j}}aPbP$f@m8\" x=\"30\" y=\"930\"><field name=\"BUTTON\">ButtonLDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"RLGGt~AzUjx.*xd,dnCR\"><field name=\"MOTOR\">Harvester</field><field name=\"DIRECTION\">rev</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"O,?IxE/GWF~^GvW!vdh/\" x=\"530\" y=\"930\"><field name=\"BUTTON\">ButtonLDown</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_spin\" id=\"!T6m~x1=FVE-PDkw=sQf\"><field name=\"MOTOR\">Harvester</field><field name=\"DIRECTION\">rev</field></block></next></block></xml>","rconfig":[{"port":[1,11,7],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"250mm","gearRatio":"3:2","direction":"fwd","gyroType":"smart","width":"200","unit":"mm","wheelbase":"150","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[10,4],"name":"ARM","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[12],"name":"TouchLED_Red","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[6],"name":"TouchLED_Blue","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[9],"name":"Bumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[3],"name":"TouchLED_Purple","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Harvester","leftDir":"false","right":"ARM","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[2],"name":"Harvester","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20210916.19.00.00","appVersion":"2.2.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, 1.5, false);\nmotor RightDriveSmart = motor(PORT11, 1.5, true);\ngyro DrivetrainGyro = gyro(PORT7, true);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGyro, 250);\n\nmotor ARMMotorA = motor(PORT10, false);\nmotor ARMMotorB = motor(PORT4, true);\nmotor_group ARM = motor_group(ARMMotorA, ARMMotorB);\n\ntouchled TouchLED_Red = touchled(PORT12);\ntouchled TouchLED_Blue = touchled(PORT6);\nbumper Bumper = bumper(PORT9);\ntouchled TouchLED_Purple = touchled(PORT3);\ncontroller Controller = controller();\nmotor Harvester = motor(PORT2, false);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Gyro\");\n  DrivetrainGyro.calibrate();\n  while (DrivetrainGyro.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n//Vision sensor index vars.\nint Vision1_objectIndex = 0;\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerLeftShoulderControlMotorsStopped = true;\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonLUp/ButtonLDown status to control Harvester\n      if (Controller.ButtonLUp.pressing()) {\n        Harvester.spin(forward);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonLDown.pressing()) {\n        Harvester.spin(reverse);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (!ControllerLeftShoulderControlMotorsStopped) {\n        Harvester.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerLeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonRUp/ButtonRDown status to control ARM\n      if (Controller.ButtonRUp.pressing()) {\n        ARM.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonRDown.pressing()) {\n        ARM.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        ARM.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0;\n\nfloat myVariable;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.setHeading(0.0, degrees);\n  Drivetrain.setDriveVelocity(60.0, percent);\n  Drivetrain.setStopping(coast);\n  ARM.setMaxTorque(100.0, percent);\n  ARM.setStopping(hold);\n  Harvester.setMaxTorque(100.0, percent);\n  TouchLED_Red.setColor(red);\n  TouchLED_Purple.setColor(purple);\n  TouchLED_Blue.setColor(blue);\n  Brain.Screen.print(\"Cyber Doll\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Battery=\");\n  Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Brain.Battery.capacity(percent)));\n  return 0;\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  Harvester.spin(forward);\n}\n\n// \"when Controller ButtonLUp released\" hat block\nvoid onevent_ControllerButtonLUp_released_0() {\n  Harvester.spin(forward);\n}\n\n// \"when Controller ButtonLDown pressed\" hat block\nvoid onevent_ControllerButtonLDown_pressed_0() {\n  Harvester.spin(reverse);\n}\n\n// \"when Controller ButtonLDown released\" hat block\nvoid onevent_ControllerButtonLDown_released_0() {\n  Harvester.spin(reverse);\n}\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n  // register event handlers\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonLUp.released(onevent_ControllerButtonLUp_released_0);\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_pressed_0);\n  Controller.ButtonLDown.released(onevent_ControllerButtonLDown_released_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","target":"Physical"}